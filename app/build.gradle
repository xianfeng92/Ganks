apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject .ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner rootProject.ext.dependencies.AndroidJUnitRunner
        javaCompileOptions {
            // 显式声明支持注解
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':gank_core')
    implementation rootProject.ext.dependencies.junit
    implementation rootProject.ext.dependencies.testrunner
    // Skeleton
    implementation rootProject.ext.dependencies.skeleton
    implementation rootProject.ext.dependencies.shimmerlayout
    debugImplementation rootProject.ext.dependencies.leakcanaryAndroid
    releaseImplementation rootProject.ext.dependencies.leakcanaryAndroidNoOp
    // Optional, if you use support library fragments:
    debugImplementation rootProject.ext.dependencies.leakcanarySupportFragment
    annotationProcessor rootProject.ext.dependencies.daggerCompiler
    implementation rootProject.ext.dependencies.dagger
    implementation rootProject.ext.dependencies.AndroidScreenAdapter
    implementation rootProject.ext.dependencies.EasyImageLoader
    implementation rootProject.ext.dependencies.blockcanary
    implementation project(path: ':domain')
    implementation project(path: ':data')
    implementation project(':domain')
}
